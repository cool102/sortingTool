type: edu
custom_name: stage4
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: src/sorting/DataType.java
  visible: true
  text: |
    package sorting;

    public enum DataType {
        LONG,
        WORD, LINE;

        DataType() {
        }
    }
  learner_created: true
- name: src/sorting/LineNaturalSorter.java
  visible: true
  text: |-
    package sorting;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Collections;
    import java.util.List;
    import java.util.stream.Collectors;

    public class LineNaturalSorter extends NaturalSorter {
        private String longestLine;
        private int longestLineCount;
        private double percentage;
        private static List<String> lines;

        public LineNaturalSorter() {
            longestLineCount = 0;
            longestLine = "";
            lines = new ArrayList<>();
        }

        @Override
        public void read() {
            while (scanner.hasNextLine()) {
                count++;
                lines.add(scanner.nextLine());
            }
        }

        @Override
        public void sort() {
            Collections.sort(lines);
        }
        public static String arrayToString() {
            String s = lines.stream()
                    .collect(Collectors.joining("\n"));

            return s;
        }

        @Override
        public String toString() {
            return "Total lines: " + count + "\n" +
                   "Sorted data:\n" + arrayToString() ;

        }
    }
  learner_created: true
- name: src/sorting/ArgParser.java
  visible: true
  text: |
    package sorting;

    class ArgsParser {
        static DataType dataType;
        static Sorter sorter;

        public static Sorter parseArgs(String[] args) {


            // если есть sortingType то взять следующую команду и проанализировать ее
            // если нет sortingType, то sortingType = natural

            for (int i = 0; i < args.length; i++) {
                if (args[i].equals("-dataType")) {
                    parseDataType(args[i + 1]);
                }
            }


            for (int i = 0; i < args.length; i++) {
                if (args[i].equals("-sortingType")) {
                    sorter = parseSortingType(args[i + 1]);
                }
            }

            if (sorter == null) {
                sorter = new NaturalSorter();
            }


            if ((dataType == DataType.LONG & (sorter instanceof NaturalSorter))) {
                return new LongNaturalSorter();
            }
            if ((dataType == DataType.LINE & (sorter instanceof NaturalSorter))) {
                return new LineNaturalSorter();
            }
            if ((dataType == DataType.WORD & (sorter instanceof NaturalSorter))) {
                return new WordNaturalSorter();
            }
            //  if ((dataType == DataType.LONG & (sorter instanceof ByCountSorter))) {
            //      return new LongByCountSorter();
            //  }
            //  if ((dataType == DataType.LINE & (sorter instanceof ByCountSorter))) {
            //      return new LongByCountSorter();
            //  }
            //  if ((dataType == DataType.WORD & (sorter instanceof ByCountSorter))) {
            //      return new LongByCountSorter();
            //  }
            return null;
        }


        public static Sorter parseSortingType(String type) {
            switch (type) {
                case "natural":
                    sorter = new NaturalSorter();
                    //case "byCount":
                    //    return new ByCountSorter(dataType);
            }
            return null;
        }

        public static void parseDataType(String arg) {
            switch (arg) {
                case "long":
                    dataType = DataType.LONG;
                    break;
                case "word":
                    dataType = DataType.WORD;
                    break;
                case "line":
                    dataType = DataType.LINE;
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        }
    }
  learner_created: true
- name: src/sorting/WordNaturalSorter.java
  visible: true
  text: |-
    package sorting;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Collections;
    import java.util.List;
    import java.util.stream.Collectors;

    public class WordNaturalSorter extends NaturalSorter {
        private String longestWord;
        private int longestWordCount;
        private double percentage;
        private static List<String> words;

        public WordNaturalSorter() {
            longestWordCount = 0;
            longestWord = "";
            words = new ArrayList<>();
        }

        @Override
        public void read() {
            while (scanner.hasNext()) {
                count++;
                words.add(scanner.next());
            }
        }

        @Override
        public void sort() {
            Collections.sort(words);
        }

        public static String arrayToString() {
            String s = words.stream()
                    .collect(Collectors.joining(" "));

            return s;
        }

        @Override
        public String toString() {

            return "Total words: " + count + ".\n"
                    + "Sorted data: " + arrayToString();
        }
    }
  learner_created: true
- name: src/sorting/NaturalSorter.java
  visible: true
  text: |
    package sorting;

    public class NaturalSorter extends Sorter {


        @Override
        public void read() {

        }

        @Override
        public void sort() {

        }
    }
  learner_created: true
- name: src/sorting/LongNaturalSorter.java
  visible: true
  text: |+
    package sorting;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;
    import java.util.stream.LongStream;

    public class LongNaturalSorter extends NaturalSorter {
        DataType dataType;
        private static List<Long> numbers;
        private long greatestNumber;
        private int greatestNumberCount;
        private double percentage;

        public LongNaturalSorter() {
            dataType = DataType.LONG;
            numbers = new ArrayList<>();
            greatestNumberCount = 0;
        }

        @Override
        public void read() {
            while (scanner.hasNextLong()) {
                count++;
                numbers.add(scanner.nextLong());
            }
        }

        @Override
        public void sort() {
            Collections.sort(numbers);
        }


        public static String arrayToString() {
            String s = numbers.stream()
                    .map(String::valueOf).collect(Collectors.joining(" "));

            return s;
        }

        @Override
        public String toString() {
            return "Total numbers: " + count + ".\n" +

                    "Sorted data: " + arrayToString();
        }
    }

  learner_created: true
- name: src/sorting/Sorter.java
  visible: true
  text: |
    package sorting;

    import java.util.Scanner;

    public abstract class Sorter {
        int count;
        Scanner scanner ;

        public Sorter() {
            this.count=0;
            scanner = new Scanner(System.in);
        }

        public abstract void read();
        public abstract void sort();
       // public abstract void print();


    }
  learner_created: true
- name: src/sorting/IntegerSorter.java
  visible: true
  text: |-
    package sorting;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    public class IntegerSorter extends Sorter{
        List<Integer> numbers;

        public IntegerSorter() {
            this.numbers = new ArrayList<>();
        }

        @Override
        public void read() {
            while (scanner.hasNextInt()) {
                count++;
                numbers.add(scanner.nextInt());
            }
        }

        @Override
        public void sort() {
            Collections.sort(numbers);
        }

        @Override
        public String toString() {
            StringBuilder output = new StringBuilder("Total numbers: " + count + ".\n" +
                    "Sorted data: ");
            for (int i = 0; i < numbers.size(); i++) {
                if (i == (numbers.size() - 1)) {
                    output.append(numbers.get(i));
                } else {
                    output.append(numbers.get(i)).append(" ");
                }
            }
            return output.toString();
        }
    }
  learner_created: true
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/LongByCountSorter.java
  visible: true
  learner_created: true
- name: src/sorting/ByCountSorter.java
  visible: true
  learner_created: true
- name: src/sorting/WordByCountSorter.java
  visible: true
  learner_created: true
- name: src/sorting/LineByCountSorter.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/45/stages/242/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 13 Jul 2022 09:00:57 UTC
record: 4
